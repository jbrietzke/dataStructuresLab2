Script started on Fri Oct  7 12:57:23 2016
[?1034hbash-3.2$ cat README,[K.md
# dataStructuresLab2

This lab's goal is to have a working single LinkedList working 

The linkedlist is written in the driver program

The Node class has its own Header file

This version of LinkedList handles appending, deleting, inserting, and traversing
bash-3.2$ cat driver.cpp 
/* Creating the linkedList
To traverse a linkedList create a new pointer that is equal to head
Then do a while list with the curr pointer as the limit
We need to always create a separate pointer to traverse the list
Curr is industry best practice because it is clear
Prev is also important because keeps track of previous

In the deault constructor the Node's next pointer must be initialized to NULL
When creating the new Node is does not know what is pointing to
*/

#include <iostream>
#include "Node.h"
#include "Node.cpp"
#include "Student.cpp"
using namespace std;

int main()
{
   // This is a pointer to a Node and located on the stack undefined
   //So we set it to NULL so we know what is there
   // using  a prev pointer is very useful in implementation
   void display(Node *);
   Node *deleteNode(Node *, Student *);
   Node *append(Node *, Node *);
   Node *insertNode(Node *, Node *, string);
   Node *head = NULL;
   Node *nptr = NULL;
   Student *studentPtr = NULL;
   bool isDone = false;
   char item;
   string firstName, lastName, itemInsertBefore;

   // Creating our list
   do {
      cout << "Enter next student (first name then last name): ";
      cin >> firstName >> lastName;
      studentPtr = new Student(firstName, lastName);
      if (firstName == "*" || lastName == "*")
      {
         isDone = true;
      }else{
         nptr = new Node(studentPtr);
         head = append(head, nptr);
      }
   }while(!isDone);
   display(head);
   do
   {
      cout << "Would you like to delete('d') or insert('i') in the list or not('*'): ";
      cin >> item;
      if (item == 'd')
      {
         cout << "Enter the last name of the person you would like to delete: ";
         cin >> lastName;
         studentPtr = new Student(lastName);
         head = deleteNode(head, studentPtr);
         display(head);
      }else if (item == 'i')
      {
         cout << "Enter the last name you would like to insert before and then the person you would like to insert: ";
         cin >> itemInsertBefore >> firstName >> lastName;
         studentPtr = new Student(firstName, lastName);
         nptr = new Node(studentPtr);
         head = insertNode(head, nptr, itemInsertBefore);
         display(head);
      }
   }while(item != '*');
   cout << "Thank you for using the application, here is your final report\n";
   display(head);
   return 0;
}

// Curr is passed by value so we can mutilate it or not
void display(Node *head)
{
   Node *curr = head;
   while(curr)
   {
      curr->display();
      curr = curr->getNextPtr();
   }
}

//passing by reference or making it a global variable is a little more approprite
Node *append(Node *head, Node *nptr)
{
   Node *curr = head;
   if (head == NULL)
   {
      head = nptr;
   }else{
      curr = head;
      while(curr->getNextPtr() != NULL){
         curr = curr->getNextPtr();
      }
      curr->setNextPtr(nptr);
   }
   return head;
}

//delete by item type
Node *deleteNode(Node *head, Student *deleteableStudent)
{
   Node *curr = head;
   Node *prev = NULL;
   bool didDelete = false;
   while(curr)
   {
      if(deleteableStudent->getLastName() == curr->getStudent()->getLastName())
      {
         didDelete = true;
         break;
      }
      prev = curr;
      curr = curr->getNextPtr();
   }

   if(curr)
   {
      if(prev)
      {
         prev->setNextPtr(curr->getNextPtr());
      }else
      {
         head = curr->getNextPtr();
      }

      curr->setNextPtr(NULL);
      delete curr;
      curr = NULL;
   }
   if (didDelete)
   {
      head = deleteNode(head, deleteableStudent);
   }
   return head;
}
// We are inserting after this item
Node *insertNode(Node *head, Node *newNode, string name)
{
   Node *curr = head;
   Node *prev = NULL;
   while(curr)
   {
      if (curr->getStudent()->getLastName() == name)
      {
         break;
      }
      else
      {
         prev = curr;
         curr = curr->getNextPtr();
      }
   }
   if (curr)
   {
      if (curr == head)
      {
         prev = head;
         head = newNode;
         newNode->setNextPtr(prev);
      }
      else
      {
         prev->setNextPtr(newNode);
         newNode->setNextPtr(curr);
      }
   }
   return head;
}

bash-3.2$ cat Node.h
#ifndef NODE_H
#define NODE_H
#include "Student.h"
class Node
{
   public:
      Node();
      Node(char);
      Node(Student *);
      ~Node();
      void display();
      void setNextPtr(Node *);
      Node *getNextPtr();
      Student *getStudent();
   private:
      Node *next;
      Student *studentPtr;
};
#endif

/* Now how we do it with private data member pointers
We need to use get and set methods to interact with them

*/
bash-3.2$ cat Node.cpp 
#include "Node.h"
#include <iostream>
using namespace std;

Node::Node()
{
   next = NULL;
   studentPtr = new Student();
}

Node::Node(char x)
{
   next = NULL;
   studentPtr = new Student(x);
}

Node::Node(Student *newStudent)
{
   next = NULL;
   studentPtr = newStudent;
}

Node::~Node()
{
   next = NULL;
}

void Node::display()
{
   studentPtr->displayFull();
}

Node *Node::getNextPtr()
{
   return next;
}

void Node::setNextPtr(Node *theNextPtr)
{
   next = theNextPtr;
}

Student * Node::getStudent()
{
   return studentPtr;
}
bash-3.2$ cat Student.h
#ifndef STUDENT_H
#define STUDENT_H

using namespace std;
class Student
{
   public:
      Student();
      Student(char);
      Student(string, string);
      Student(string);
      ~Student();
      string getLastName();
      string getFirstName();
      void displayLastName();
      void displayFull();
   private:
      string firstName, lastName;
};
#endif
bash-3.2$ cat Student.cpp 
#include <iostream>
#include "Student.h"
using namespace std;


Student::Student()
{
   cout << "We are in the Student default Constructor\n";
   firstName = "John";
   lastName = "Doe";
}

Student::Student(char newName)
{
   cout << "We are in the newName student Constructor\n";
   lastName = "blah";
}

Student::Student(string fName, string lName)
{
   cout << "We are in the names student Constructor\n";
   firstName = fName;
   lastName = lName;
}

Student::Student(string lName)
{
   cout << "Only last name Constructor\n";
   firstName = "Blah";
   lastName = lName;
}

string Student::getLastName()
{
   return lastName;
}

string Student::getFirstName()
{
   return firstName;
}

void Student::displayLastName()
{
   cout << lastName << endl;
}

void Student::displayFull()
{
   cout << firstName << ", " << lastName << endl;
}
bash-3.2$ g++ driver.cpp 
bash-3.2$ ./a.out
Enter next student (first name then last name): Jack Brooms
We are in the names student Constructor
Enter next student (first name then last name): John Cloud
We are in the names student Constructor
Enter next student (first name then last name): * *
We are in the names student Constructor
Jack, Brooms
John, Cloud
Would you like to delete('d') or insert('i') in the list or not('*'): d
Enter the last name of the person you would like to delete: Brooms
Only last name Constructor
John, Cloud
Would you like to delete('d') or insert('i') in the list or not('*'): i
Enter the last name you would like to insert before and then the person you would like to insert: Cloud Grace Michaels
We are in the names student Constructor
Grace, Michaels
John, Cloud
Would you like to delete('d') or insert('i') in the list or not('*'): *
Thank you for using the application, here is your final report
Grace, Michaels
John, Cloud
bash-3.2$ exit
exit

Script done on Fri Oct  7 12:58:49 2016
